/*

	Cathedral - Laura, the FoA spy

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_LAURA
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BONEYARD)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;

import variable Laura_Ptr;
import variable Red_Door_Ptr;

variable rndu;
variable MALE;
variable tmp_hostile;
variable ILLEGAL;
variable ILLEGALBEFORE;
variable TRESPASS;
variable CRIME;

procedure lauracbt;
procedure laura01;
procedure laura01a;
procedure laura02;
procedure laura03;
procedure laura04;
procedure laura09;
procedure laura10;
procedure laura11;
procedure laura14;
procedure laura15;
procedure laura16;
procedure laura16a;
procedure laura21;
procedure laura22;
procedure laura23;
procedure laura23_1;
procedure laura24;
procedure laura25;
procedure laura26;
procedure laura27;
procedure laura28;
procedure laura29;
procedure laura30;
procedure laura31;
procedure laura32;
procedure laura32a;
procedure laura33;
procedure laura34;
procedure laura35;
procedure laura36;
procedure laura37;
procedure laura38;
procedure laura39;
procedure laura40;
procedure laura41;
procedure laura42;
procedure laura43;
procedure laura44;
procedure laura45;
procedure laura46;
procedure laura46_1;
procedure laura47;
procedure laura48;
procedure laura49;
procedure laura50;
procedure laura51;
procedure laura52;
procedure laura53;
procedure laura54;
procedure laura55;
procedure laura56;
procedure laura57;
procedure laura57_01;
procedure laura58;
procedure laura59;
procedure laura60;
procedure laura61;
procedure laura62;
procedure laura63;
procedure laura64;
procedure laura65;
procedure laura67;
procedure laura68;
procedure laura69;
procedure laura70;
procedure laura71;
procedure laura72;
procedure laura73;
procedure laura74;
procedure laura75;
procedure laura76;
procedure laura77;
procedure laura78;
procedure laura79;
procedure lauraxx;
procedure laurax;
procedure laurax1;
procedure laurax2;
procedure laurax3;
procedure laurax4;
procedure laurax5;
procedure laurax6;
procedure laurax7;
procedure laurax8;
procedure laura67a;
procedure laura68a;
procedure laura69a;
procedure laura70a;
procedure laura71a;
procedure laura72a;
procedure laura73a;
procedure laura74a;
procedure laura75a;
procedure laura76a;
procedure laura77a;
procedure laura78a;
procedure laura79a;
procedure laura80;
procedure laura80a;
procedure laura81;
procedure laura81a;
procedure laura82;
procedure laura82a;
procedure laura83;
procedure laura83a;
procedure laura84;
procedure laura84a;
procedure laura85;
procedure laura85a;
procedure laura86;
procedure laura86a;
procedure laura87;
procedure laura87a;
procedure laura88;
procedure laura88a;
procedure lauraend;

procedure Node1000;

#define LVAR_Move_Secret_Door    (4)
#define LVAR_Move_Private        (5)

variable asked_questions := 0;

procedure start begin
end

procedure map_enter_p_proc begin
   if is_laura_escaping or is_laura_escaped then begin
      set_laura_escaped;
      destroy_object(self_obj);
   end
end

procedure look_at_p_proc begin
	script_overrides;
	display_msg(message_str(NAME, 100));
end

procedure description_p_proc begin
	script_overrides;
	display_msg(message_str(NAME, 100));
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
	Laura_Ptr := self_obj;

	// Laura shows the door to the Master's Lair.
	if (local_var(LVAR_Move_Secret_Door) == 1) then begin
		set_local_var(LVAR_Move_Secret_Door, 2);
		set_local_var(9, 1);
		self_walk_to_tile( 14089 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 2) and (self_tile != 14089)) then begin
		self_walk_to_tile( 14089 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 2) and (self_tile == 14089)) then begin
		set_local_var(LVAR_Move_Secret_Door, 3);
		obj_unlock(Red_Door_Ptr);
		use_obj(Red_Door_Ptr);
		self_walk_to_tile( 12495 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 3) and (self_tile != 12495)) then begin
		self_walk_to_tile( 12495 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 3) and (self_tile == 12495)) then begin
		set_local_var(LVAR_Move_Secret_Door, 4);
		self_walk_to_tile( 12302 );
	end
	else if (local_var(LVAR_Move_Secret_Door) == 4) then begin
		float_msg( self_obj, message_str(SCRIPT_GENCHAT, 178), FLOAT_MSG_YELLOW );
		set_local_var(LVAR_Move_Secret_Door, 5);
		set_local_var(9, 2);

      debug("Laura will escape now!");
      set_laura_escaping;
	end
	else if (local_var(LVAR_Move_Secret_Door) == 5) then begin
		set_local_var(LVAR_Move_Secret_Door, 6);
		self_walk_to_tile( 15099 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 6) and (self_tile != 15099)) then begin
		self_walk_to_tile( 15099 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 6) and (self_tile == 15099)) then begin
		set_local_var(LVAR_Move_Secret_Door, 7);
		self_walk_to_tile( 23301 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 7) and (self_tile != 23301)) then begin
		self_walk_to_tile( 23301 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 7) and (self_tile == 23301)) then begin
		set_local_var(LVAR_Move_Secret_Door, 8);
		self_walk_to_tile( 27106 );
	end
	/*else if ((local_var(LVAR_Move_Secret_Door) == 8) and (self_tile != 27106)) then begin
		self_walk_to_tile( 27106 );
	end
	else if ((local_var(LVAR_Move_Secret_Door) == 8) and (self_tile == 27106)) then begin
		set_local_var(LVAR_Move_Secret_Door, 9);
		if not(is_loading_game) then begin    set_self_invisible;    end
	end*/
   else if ((local_var(LVAR_Move_Secret_Door) == 8) and (self_tile != 26105)) then begin
		self_walk_to_tile( 26105 );
	end

	// Laura has escaped:
	else if ((local_var(LVAR_Move_Secret_Door) == 8) and (self_tile == 26105)) then begin
		set_local_var(LVAR_Move_Secret_Door, 9);
		if not(is_loading_game) then begin
		   play_sfx("SODOORSF");
		   set_laura_escaped;
		   set_self_invisible;
      end
	end

	// Laura moves to another room, so player can speak to here in private:
	else if (local_var(LVAR_Move_Private) == 1) then begin
		set_local_var(LVAR_Move_Private, 2);
		self_walk_to_tile( 22090 );
	end
	else if ((local_var(LVAR_Move_Private) == 2) and (self_tile != 22090)) then begin
		self_walk_to_tile( 22090 );
	end
	else if ((local_var(LVAR_Move_Private) == 2) and (self_tile == 22090)) then begin
		set_local_var(LVAR_Move_Private, 3);
	end

   // Laura is in the private room or at the backdoor. Dude can talk to her again:
	else if (local_var(9) == 1) then begin
		if ((self_tile == 22090) or (self_tile == 12495)) then begin
			set_local_var(9, 0);
		end
	end

	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
end

procedure timed_event_p_proc begin
   tmp_hostile := 1;
end

procedure talk_p_proc begin
	get_reaction
	if (local_var(9) == 1) then begin
		float_msg( self_obj, message_str(SCRIPT_GENCHAT, 177), FLOAT_MSG_YELLOW );
	end
	else begin
		if (local_var(9) == 2) then begin
			float_msg( self_obj, message_str(SCRIPT_GENCHAT, 179), FLOAT_MSG_YELLOW );
		end
		else begin
			start_gdialog(48, self_obj, 4, 3, 8);
			gsay_start;
			MALE := dude_is_male;
			if (ILLEGAL) then begin
				if (ILLEGALBEFORE) then begin
					call laura63;
				end
				else begin
					ILLEGALBEFORE := 1;
					if (CRIME == TRESPASS) then begin
						call laura65;
					end
					if (CRIME > TRESPASS) then begin
						call laura64;
					end
				end
			end
			else begin
				if (local_var(6)) then begin
					if (local_var(7) == 1) then begin
						call laura61;
					end
					else if (local_var(8) == 1) then begin
						call laura21;
					end
					else begin
						call laura16;
					end
				end
				else begin
					set_local_var(6, 1);
					call laura01;
				end
			end
			gsay_end;
			end_dialogue;
		end
	end
end

procedure destroy_p_proc begin
   if (global_var(GVAR_IS_LAURA_ALIVE) < 3) then
      set_global_var( GVAR_IS_LAURA_ALIVE, 0 );

	rm_timer_event(self_obj);
	inc_good_critter
end

procedure lauracbt begin
	tmp_hostile := 1;
end

procedure laura01 begin
	if (MALE) then begin
		gsay_reply( NAME, 102 );
	end
	else begin
		gsay_reply( NAME, 104 );
	end
	if (global_var( GVAR_SHADOW_PASSWORD ) == 1) then begin
		giq_option( 4, NAME, 105, laura02, NEUTRAL_REACTION );
	end
	giq_option( 5, NAME, 106, laura14, NEUTRAL_REACTION );
	giq_option( 4, NAME, 107, laura15, BAD_REACTION );
	giq_option( -3, NAME, 108, laura01a, NEUTRAL_REACTION );
end

procedure laura01a begin
	gsay_message( NAME, 110, NEUTRAL_REACTION );
	call laurax;
end

procedure laura02 begin
	gsay_reply( NAME, 112 );
	if (global_var( GVAR_SHADOW_PASSWORD ) == 1) then begin
		giq_option( 4, NAME, 113, laura03, NEUTRAL_REACTION );
	end
	giq_option( 4, NAME, 114, laura10, NEUTRAL_REACTION );
end

procedure laura03 begin
	gsay_reply( NAME, 116 );
	if (global_var( GVAR_SHADOW_PASSWORD ) == 1) then begin
		giq_option( 4, NAME, 117, laura04, NEUTRAL_REACTION );
	end
	giq_option( 4, NAME, 118, laura09, NEUTRAL_REACTION );
end

procedure laura04 begin
	gsay_message( NAME, 120, NEUTRAL_REACTION );
	set_local_var(7, 1);
	call laurax1;
end

procedure laura09 begin
	gsay_reply( NAME, 122 );
	call laurax;
end

procedure laura10 begin
	gsay_reply( NAME, 124 );
	giq_option( 4, NAME, 125, laura03, NEUTRAL_REACTION );
	giq_option( 4, NAME, 126, laura11, NEUTRAL_REACTION );
end

procedure laura11 begin
	DownReact
	gsay_message( NAME, 128, NEUTRAL_REACTION );
	call laurax;
end

procedure laura14 begin
	gsay_message( NAME, 130, NEUTRAL_REACTION );
	call laurax;
end

procedure laura15 begin
	DownReact
	gsay_message( NAME, 132, NEUTRAL_REACTION );
	call laurax;
end

procedure laura16 begin
	if (local_var(1) > 1) then begin
		gsay_reply( NAME, 134 );
	end
	else begin
		gsay_reply( NAME, 136 );
	end
	if (global_var( GVAR_SHADOW_PASSWORD ) == 1) then begin
		giq_option( 4, NAME, 137, laura02, NEUTRAL_REACTION );
	end
	giq_option( 4, NAME, 138, laura14, NEUTRAL_REACTION );
	giq_option( 4, NAME, 139, laurax, NEUTRAL_REACTION );
	giq_option( -3, NAME, 140, laura16a, NEUTRAL_REACTION );
end

procedure laura16a begin
	gsay_message( NAME, 142, NEUTRAL_REACTION );
	call laurax;
end

procedure laura21 begin
	gsay_message( NAME, 144, NEUTRAL_REACTION );
	giq_option( 4, NAME, 145, laura22, NEUTRAL_REACTION );
end

procedure laura22 begin
	gsay_message( NAME, 147, NEUTRAL_REACTION );
	call laura23;
end

procedure laura23 begin
	giq_option( 5, NAME, 148, laura24, NEUTRAL_REACTION );
	giq_option( 4, NAME, 149, laura33, NEUTRAL_REACTION );
	giq_option( 4, NAME, 150, laura23_1, NEUTRAL_REACTION );
	if (MALE) then begin
		giq_option( 4, NAME, 151, laura60, NEUTRAL_REACTION );
	end

	// Tell Laura to GTFO now.
	if (asked_questions > 2) then
	   NOption(499,Node1000,004);

	giq_option( 4, NAME, 152, laura59, NEUTRAL_REACTION );
end

procedure laura23_1 begin
   asked_questions := asked_questions + 1;

	if (global_var( GVAR_COC_STATUS ) == 0) then begin
		call laura51;
	end
	if (global_var( GVAR_COC_STATUS ) == 1) then begin
		call laura38;
	end
	if (global_var( GVAR_COC_STATUS ) == 2) then begin
		call laura46;
	end
end

procedure laura24 begin
   asked_questions := asked_questions + 1;

	gsay_reply( NAME, 154 );
	giq_option( 4, NAME, 155, laura25, NEUTRAL_REACTION );
end

procedure laura25 begin
	gsay_reply( NAME, 157 );
	giq_option( 4, NAME, 158, laura26, NEUTRAL_REACTION );
	giq_option( 4, NAME, 159, laura28, NEUTRAL_REACTION );
end

procedure laura26 begin
	gsay_reply( NAME, 161 );
	giq_option( 4, NAME, 162, laura27, NEUTRAL_REACTION );
	giq_option( 4, NAME, 163, laura31, NEUTRAL_REACTION );
end

procedure laura27 begin
	gsay_reply( NAME, 165 );
	giq_option( 4, NAME, 166, laura28, NEUTRAL_REACTION );
end

procedure laura28 begin
	gsay_reply( NAME, 168 );
	giq_option( 4, NAME, 169, laura29, NEUTRAL_REACTION );
	giq_option( 4, NAME, 170, laura30, NEUTRAL_REACTION );
end

procedure laura29 begin
	gsay_reply( NAME, 172 );
	call laurax4;
end

procedure laura30 begin
	rndu := random(1, 2);
	if (rndu == 1) then begin
		gsay_reply( NAME, 174 );
	end
	if (rndu == 2) then begin
		gsay_reply( NAME, 176 );
	end
	call laura23;
end

procedure laura31 begin
	gsay_reply( NAME, 178 );
	giq_option( 4, NAME, 179, laura32a, BAD_REACTION );
	giq_option( 4, NAME, 180, laura30, NEUTRAL_REACTION );
end

procedure laura32 begin
	gsay_reply( NAME, 182 );
	giq_option( 4, NAME, 183, laurax2, BAD_REACTION );
	giq_option( 4, NAME, 184, laurax8, NEUTRAL_REACTION );
	giq_option( 4, NAME, 185, laura30, NEUTRAL_REACTION );
end

procedure laura32a begin
	DownReact
	call laura32;
end

procedure laura33 begin
   asked_questions := asked_questions + 1;

	gsay_reply( NAME, 187 );
	giq_option( 4, NAME, 188, laura34, NEUTRAL_REACTION );
	giq_option( 4, NAME, 189, laura35, NEUTRAL_REACTION );
end

procedure laura34 begin
	gsay_reply( NAME, 191 );
	giq_option( 6, NAME, 192, laura36, NEUTRAL_REACTION );
	giq_option( 4, NAME, 193, laura36, NEUTRAL_REACTION );
end

procedure laura35 begin
	gsay_reply( NAME, 195 );
	giq_option( 6, NAME, 196, laura36, NEUTRAL_REACTION );
	giq_option( 4, NAME, 197, laura36, NEUTRAL_REACTION );
end

procedure laura36 begin
	gsay_reply( NAME, 199 );
	giq_option( 4, NAME, 200, laura37, NEUTRAL_REACTION );
end

procedure laura37 begin
	gsay_reply( NAME, 202 );
	giq_option( 4, NAME, 203, laura28, NEUTRAL_REACTION );
	giq_option( 4, NAME, 204, laura27, NEUTRAL_REACTION );
end

procedure laura38 begin
	gsay_reply( NAME, 206 );
	giq_option( 4, NAME, 207, laura39, NEUTRAL_REACTION );
	giq_option( 4, NAME, 208, laura43, NEUTRAL_REACTION );
end

procedure laura39 begin
	gsay_reply( NAME, 210 );
	giq_option( 4, NAME, 211, laura40, NEUTRAL_REACTION );
	giq_option( 4, NAME, 212, laura42, NEUTRAL_REACTION );
end

procedure laura40 begin
	gsay_reply( NAME, 214 );
	giq_option( 4, NAME, 215, laura30, NEUTRAL_REACTION );
	giq_option( 4, NAME, 216, laura41, NEUTRAL_REACTION );
end

procedure laura41 begin
	gsay_message( NAME, 218, NEUTRAL_REACTION );
	call laurax6;
end

procedure laura42 begin
	gsay_reply( NAME, 220 );
	giq_option( 4, NAME, 221, laura30, NEUTRAL_REACTION );
	giq_option( 4, NAME, 222, laura41, NEUTRAL_REACTION );
end

procedure laura43 begin
	gsay_reply( NAME, 224 );
	giq_option( 4, NAME, 225, laura44, NEUTRAL_REACTION );
	giq_option( 4, NAME, 226, laura45, NEUTRAL_REACTION );
end

procedure laura44 begin
	gsay_reply( NAME, 228 );
	giq_option( 4, NAME, 229, laura42, NEUTRAL_REACTION );
	giq_option( 4, NAME, 230, laura45, NEUTRAL_REACTION );
end

procedure laura45 begin
	gsay_reply( NAME, 232 );
	giq_option( 4, NAME, 233, laura37, NEUTRAL_REACTION );
	giq_option( 4, NAME, 234, laura30, NEUTRAL_REACTION );
	giq_option( 4, NAME, 235, laura41, NEUTRAL_REACTION );
end

procedure laura46 begin
	gsay_reply( NAME, 237 );
	giq_option( 4, NAME, 238, laura46_1, NEUTRAL_REACTION );
end

procedure laura46_1 begin
	if boneyard_invaded then begin
		call laura46;
	end
	if hub_invaded then begin
		call laura49;
	end
end

procedure laura47
begin
	gsay_reply( NAME, 240 );
	giq_option( 4, NAME, 241, laura48, NEUTRAL_REACTION );
	giq_option( 4, NAME, 242, laura45, NEUTRAL_REACTION );
end

procedure laura48
begin
	gsay_reply( NAME, 244 );
	giq_option( 4, NAME, 245, laura45, NEUTRAL_REACTION );
end

procedure laura49
begin
	gsay_reply( NAME, 247 );
	giq_option( 4, NAME, 248, laura50, NEUTRAL_REACTION );
	giq_option( 4, NAME, 249, laura45, NEUTRAL_REACTION );
end

procedure laura50
begin
	gsay_reply( NAME, 251 );
	giq_option( 4, NAME, 252, laura45, NEUTRAL_REACTION );
end

procedure laura51
begin
	gsay_reply( NAME, 254 );
	giq_option( 4, NAME, 255, laura52, NEUTRAL_REACTION );
	giq_option( 4, NAME, 256, laura55, NEUTRAL_REACTION );
	giq_option( 4, NAME, 257, laura57, NEUTRAL_REACTION );
end

procedure laura52
begin
	gsay_reply( NAME, 259 );
	giq_option( 4, NAME, 260, laura53, NEUTRAL_REACTION );
	giq_option( 4, NAME, 261, laura55, NEUTRAL_REACTION );
end

procedure laura53
begin
	gsay_reply( NAME, 263 );
	giq_option( 4, NAME, 264, laura54, NEUTRAL_REACTION );
	giq_option( 4, NAME, 265, laura30, NEUTRAL_REACTION );
end

procedure laura54
begin
	gsay_reply( NAME, 267 );
	call laura23;
end

procedure laura55
begin
	gsay_reply( NAME, 269 );
	giq_option( 4, NAME, 270, laura33, NEUTRAL_REACTION );
	giq_option( 4, NAME, 271, laura56, NEUTRAL_REACTION );
end

procedure laura56
begin
	gsay_reply( NAME, 273 );
	call laura23;
end

procedure laura57
begin
	gsay_reply( NAME, 275 );
	giq_option( 4, NAME, 276, laura57_01, NEUTRAL_REACTION );
	giq_option( 4, NAME, 277, laura56, NEUTRAL_REACTION );
	giq_option( 4, NAME, 278, laura55, NEUTRAL_REACTION );
end

procedure laura57_01
begin
	DownReact
	if (local_var(1) > 1) then begin
		call laura58;
	end
	else begin
		call laura32;
	end
end

procedure laura58
begin
	gsay_reply( NAME, 280 );
	giq_option( 6, NAME, 281, laura32, NEUTRAL_REACTION );
	giq_option( 4, NAME, 282, laura23, NEUTRAL_REACTION );
end

procedure laura59
begin
	gsay_reply( NAME, 284 );
	call laurax7;
end

procedure laura60
begin
	gsay_reply( NAME, 286 );
	call laura23;
end

procedure laura61 begin
	if (local_var(1) > 1) then begin
		gsay_reply( NAME, 288 );
	end
	else begin
		gsay_reply( NAME, 290 );
	end
	giq_option( 4, NAME, 291, laura30, NEUTRAL_REACTION );
	giq_option( 4, NAME, 292, laura41, NEUTRAL_REACTION );
end

procedure laura62 begin
	DownReact
	gsay_message( NAME, 294, NEUTRAL_REACTION );
end

procedure laura63 begin
	DownReact
	gsay_reply( NAME, 296 );
	giq_option( 4, NAME, 297, laurax2, NEUTRAL_REACTION );
	giq_option( 4, NAME, 298, laurax5, NEUTRAL_REACTION );
end

procedure laura64
begin
	DownReact
	gsay_message( NAME, 300, NEUTRAL_REACTION );
end

procedure laura65
begin
	DownReact
	gsay_reply( NAME, 302 );
	giq_option( 4, NAME, 303, laurax2, NEUTRAL_REACTION );
	giq_option( 4, NAME, 304, laurax5, NEUTRAL_REACTION );
end

procedure laura67
begin
	gsay_message( NAME, 306, NEUTRAL_REACTION );
end

procedure laura68
begin
	gsay_message( NAME, 309, NEUTRAL_REACTION );
end

procedure laura69
begin
	gsay_message( NAME, 311, NEUTRAL_REACTION );
end

procedure laura70
begin
	gsay_message( NAME, 313, NEUTRAL_REACTION );
end

procedure laura71
begin
	gsay_message( NAME, 315, NEUTRAL_REACTION );
end

procedure laura72
begin
	gsay_message( NAME, 317, NEUTRAL_REACTION );
end

procedure laura73
begin
	gsay_message( NAME, 319, NEUTRAL_REACTION );
end

procedure laura74
begin
	gsay_message( NAME, 321, NEUTRAL_REACTION );
end

procedure laura75
begin
	gsay_message( NAME, 323, NEUTRAL_REACTION );
end

procedure laura76
begin
	gsay_message( NAME, 325, NEUTRAL_REACTION );
end

procedure laura77
begin
	gsay_message( NAME, 327, NEUTRAL_REACTION );
end

procedure laura78
begin
	gsay_message( NAME, 329, NEUTRAL_REACTION );
end

procedure laura79
begin
	gsay_message( NAME, 331, NEUTRAL_REACTION );
end

procedure lauraxx
begin
end

procedure laurax
begin
end

procedure laurax1 begin
	set_local_var(8, 1);
	set_local_var(LVAR_Move_Private, 1);
	set_local_var(9, 1);
end

procedure laurax2
begin
	add_timer_event(self_obj, 5, 1);
end

procedure laurax3
begin
end

procedure laurax4 begin
	set_local_var(LVAR_Move_Secret_Door, 1);
	set_local_var(9, 1);
end

procedure laurax5 begin
	gfade_out(1);
	gfade_in(1);
end

procedure laurax6 begin
	set_local_var(LVAR_Move_Private, 1);
	set_local_var(9, 1);
end

procedure laurax7
begin
end

procedure laurax8
begin
end

procedure laura67a
begin
	gsay_message( NAME, 308, NEUTRAL_REACTION );
end

procedure laura68a
begin
	gsay_message( NAME, 310, NEUTRAL_REACTION );
end

procedure laura69a
begin
	gsay_message( NAME, 312, NEUTRAL_REACTION );
end

procedure laura70a
begin
	gsay_message( NAME, 314, NEUTRAL_REACTION );
end

procedure laura71a
begin
	gsay_message( NAME, 316, NEUTRAL_REACTION );
end

procedure laura72a
begin
	gsay_message( NAME, 318, NEUTRAL_REACTION );
end

procedure laura73a
begin
	gsay_message( NAME, 320, NEUTRAL_REACTION );
end

procedure laura74a
begin
	gsay_message( NAME, 322, NEUTRAL_REACTION );
end

procedure laura75a
begin
	gsay_message( NAME, 324, NEUTRAL_REACTION );
end

procedure laura76a
begin
	gsay_message( NAME, 326, NEUTRAL_REACTION );
end

procedure laura77a
begin
	gsay_message( NAME, 328, NEUTRAL_REACTION );
end

procedure laura78a
begin
	gsay_message( NAME, 330, NEUTRAL_REACTION );
end

procedure laura79a
begin
	gsay_message( NAME, 332, NEUTRAL_REACTION );
end

procedure laura80
begin
	gsay_message( NAME, 333, NEUTRAL_REACTION );
end

procedure laura80a
begin
	gsay_message( NAME, 334, NEUTRAL_REACTION );
end

procedure laura81
begin
	gsay_message( NAME, 335, NEUTRAL_REACTION );
end

procedure laura81a
begin
	gsay_message( NAME, 336, NEUTRAL_REACTION );
end

procedure laura82
begin
	gsay_message( NAME, 337, NEUTRAL_REACTION );
end

procedure laura82a
begin
	gsay_message( NAME, 338, NEUTRAL_REACTION );
end

procedure laura83
begin
	gsay_message( NAME, 339, NEUTRAL_REACTION );
end

procedure laura83a
begin
	gsay_message( NAME, 340, NEUTRAL_REACTION );
end

procedure laura84
begin
	gsay_message( NAME, 341, NEUTRAL_REACTION );
end

procedure laura84a
begin
	gsay_message( NAME, 342, NEUTRAL_REACTION );
end

procedure laura85
begin
	gsay_message( NAME, 343, NEUTRAL_REACTION );
end

procedure laura85a
begin
	gsay_message( NAME, 344, NEUTRAL_REACTION );
end

procedure laura86
begin
	gsay_message( NAME, 345, NEUTRAL_REACTION );
end

procedure laura86a
begin
	gsay_message( NAME, 346, NEUTRAL_REACTION );
end

procedure laura87
begin
	gsay_message( NAME, 347, NEUTRAL_REACTION );
end

procedure laura87a
begin
	gsay_message( NAME, 348, NEUTRAL_REACTION );
end

procedure laura88
begin
	gsay_message( NAME, 349, NEUTRAL_REACTION );
end

procedure laura88a
begin
	gsay_message( NAME, 350, NEUTRAL_REACTION );
end

procedure lauraend
begin
end

procedure Node1000 begin
	gsay_message( NAME, 284, NEUTRAL_REACTION );
	set_laura_escaping;
	set_local_var(LVAR_Move_Secret_Door, 7);
end
