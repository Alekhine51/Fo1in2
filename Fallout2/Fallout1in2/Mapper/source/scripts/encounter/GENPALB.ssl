/*

   Encounter - Generic BoS Paladin

*/

#include "define.h"
#include "brotherhood.h"

#define NAME                    SCRIPT_GENPALB
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BOS)

#include "command.h"
#include "modreact.h"
#include "updatmap.h"

procedure start;
procedure combat_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;

procedure GenPalB00;
procedure GenPalB01;
procedure GenPalB02;
procedure GenPalB03;
procedure GenPalB04;
procedure GenPalB05;
procedure GenPalB06;
procedure GenPalB07;
procedure GenPalB08;
procedure GenPalB09;
procedure GenPalB10;
procedure GenPalB10a;
procedure GenPalB11;
procedure GenPalB12;
procedure GenPalB13;
procedure GenPalB14;
procedure GenPalB15;
procedure GenPalB16;
procedure GenPalB17;
procedure GenPalB18;
procedure GenPalB19;
procedure GenPalB20;
procedure GenPalB20a;
procedure GenPalB21;
procedure GenPalB22;
procedure GenPalB23;
procedure GenPalB24;
procedure GenPalB25;

variable annoyed;
variable tmp_hostile;
variable initial := 0;
variable known;
variable round_counter;
variable scared;

import variable random_seed_1;

procedure start begin
   if not(initial) then begin
      set_self_team(TEAM_BROTHERHOOD);
      set_self_ai(AI_BROTHERHOOD_PALADIN);
      tmp_hostile := global_var(GVAR_AGGRO_FLAG_RND_ENC_unsure);
      initial := 1;
   end
end

procedure combat_p_proc begin
   if (fixed_param == COMBAT_SUBTYPE_TURN) then begin
      round_counter := round_counter + 1;
      if (self_cur_hp < 10) then begin
         scared := 1;
      end
   end
end

procedure critter_p_proc begin
   if (scared) then begin
      if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
         call flee_dude;
      end
   end
   else if (tmp_hostile) then begin
      tmp_hostile := 0;
      random_seed_1 := 1;
      attack(dude_obj);
   end
end

procedure destroy_p_proc begin
   inc_good_critter
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_BROTHERHOOD, 1);
      random_seed_1 := 1;
   end
end

procedure pickup_p_proc begin
   if (not(scared)) then begin
      tmp_hostile := 1;
      set_global_var(GVAR_AGGRO_FLAG_RND_ENC_unsure, 1);
   end
end

procedure talk_p_proc begin
   dude_look_at_self;
   if (known) then begin
      if (annoyed) then
         call GenPalB23;
      else
         start_dialog_at_node(GenPalB24);
   end
   else if (scared) then begin
      call GenPalB01;
   end
   else if ((random_seed_1 == 1) or (global_var(GVAR_ENEMY_BROTHERHOOD) == 1)) then begin
      call GenPalB00;
   end
   else begin
      if joined_bos then begin
         start_dialog_at_node(GenPalB02);
      end
      else if (global_var(GVAR_WORLDMAPLIST_BROTHERHOOD) >= 1) then begin
         if (check_general_rep >= 20) then
            start_dialog_at_node(GenPalB03);
         else
            start_dialog_at_node(GenPalB04);
      end
      else begin
         if ((check_general_rep < 20) or (has_rep_berserker) or has_rep_childkiller) then
            start_dialog_at_node(GenPalB06);
         else
            start_dialog_at_node(GenPalB05);
      end
   end
end

procedure GenPalB00 begin
   float_msg(self_obj, message_str(NAME, 100), FLOAT_MSG_RED);
   tmp_hostile := 1;
   set_global_var(GVAR_AGGRO_FLAG_RND_ENC_unsure, 1);
end

procedure GenPalB01 begin
   float_msg(self_obj, message_str(NAME, 101), FLOAT_MSG_RED);
end

procedure GenPalB02 begin
   known := 1;
   gsay_reply(NAME, 102);
   NOption(103, GenPalB07, 7);
   NOption(104, GenPalB08, 4);
   NOption(105, GenPalB09, 4);
   NOption(106, GenPalB10, 4);
   NLowOption(107, GenPalB11);
end

procedure GenPalB03 begin
   known := 1;
   gsay_reply(NAME, 108);
   NOption(109, GenPalB12, 7);
   NOption(110, GenPalB13, 4);
   NOption(111, GenPalB14, 4);
   NOption(112, GenPalB15, 4);

   if not(car_in_any_encounter) then
      NOption(113, GenPalB16, 4);

   NLowOption(114, GenPalB11);
end

procedure GenPalB04 begin
   known := 1;
   annoyed := 1;
   gsay_message(NAME, 115, BAD_REACTION);
end

procedure GenPalB05 begin
   known := 1;
   gsay_reply(NAME, 116);
   if looking_for_waterchip then
      NOption(message_str(NAME, 117) + dude_name + message_str(NAME, 118), GenPalB17, 4);
   NOption(message_str(NAME, 117) + dude_name + message_str(NAME, 119), GenPalB18, 4);
   NOption(message_str(NAME, 117) + dude_name + message_str(NAME, 120), GenPalB19, 4);
   NOption(message_str(NAME, 117) + dude_name + message_str(NAME, 121), GenPalB21, 4);
   BOption(122, GenPalB21, 4);
   NLowOption(123, GenPalB22);
end

procedure GenPalB06 begin
   known := 1;
   annoyed := 1;
   gsay_message(NAME, 124, BAD_REACTION);
end

procedure GenPalB07 begin
   gsay_message(NAME, 125, NEUTRAL_REACTION);
end

procedure GenPalB08 begin
   gsay_message(NAME, 126, NEUTRAL_REACTION);
end

procedure GenPalB09 begin
   gsay_message(NAME, 127, NEUTRAL_REACTION);
end

procedure GenPalB10 begin
   gsay_reply(NAME, 128);
   NOption(g_more, GenPalB10a, 1);
end

procedure GenPalB10a begin
   gsay_message(NAME, 129, NEUTRAL_REACTION);
end

procedure GenPalB11 begin
   gsay_message(NAME, 130, NEUTRAL_REACTION);
end

procedure GenPalB12 begin
   gsay_reply(NAME, 131);
   if looking_for_waterchip then
      NOption(132, GenPalB17, 4);
   NOption(133, GenPalB18, 4);
   NOption(134, GenPalB19, 4);
   NOption(135, GenPalB20, 4);
   NOption(122, GenPalB21, 4);
end

procedure GenPalB13 begin
   known := 1;
   annoyed := 1;
   gsay_message(NAME, 136, BAD_REACTION);
end

procedure GenPalB14 begin
   gsay_message(NAME, 137, NEUTRAL_REACTION);
end

procedure GenPalB15 begin
   gsay_message(NAME, 138, NEUTRAL_REACTION);
end

procedure GenPalB16 begin
   gsay_message(NAME, 139, NEUTRAL_REACTION);
   gfade_out(1);
      advance_time_travel_to_bos;
   gfade_in(1);
end

procedure GenPalB17 begin
   gsay_message(NAME, 140, NEUTRAL_REACTION);
end

procedure GenPalB18 begin
   gsay_message(NAME, 141, NEUTRAL_REACTION);
end

procedure GenPalB19 begin
   annoyed := 1;
   gsay_message(NAME, 142, BAD_REACTION);
end

procedure GenPalB20 begin
   gsay_reply(NAME, 143);
   NOption(g_more, GenPalB20a, 1);
end

procedure GenPalB20a begin
   gsay_message(NAME, 144, NEUTRAL_REACTION);
end

procedure GenPalB21 begin
   tmp_hostile := 1;
   set_global_var(GVAR_AGGRO_FLAG_RND_ENC_unsure, 1);
   if (dude_is_male) then
      gsay_message(NAME, 145, BAD_REACTION);
   else
      gsay_message(NAME, 146, BAD_REACTION);
end

procedure GenPalB22 begin
   gsay_message(NAME, 147, NEUTRAL_REACTION);
end

procedure GenPalB23 begin
   float_msg(self_obj, message_str(NAME, 148), FLOAT_MSG_RED);
end

procedure GenPalB24 begin
   gsay_reply(NAME, 149);
   if looking_for_waterchip then
      NOption(132, GenPalB17, 4);
   NOption(133, GenPalB18, 4);
   NOption(150, GenPalB25, 4);
   NOption(135, GenPalB20, 4);
   BOption(122, GenPalB21, 4);
end

procedure GenPalB25 begin
   annoyed := 1;
   gsay_message(NAME, 151, BAD_REACTION);
end
