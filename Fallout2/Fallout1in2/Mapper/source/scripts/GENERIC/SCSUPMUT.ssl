/*

   Super Mutant - Invaders used in Boneyard

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_SCSUPMUT
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_CATHEDRAL)

#include "..\headers\command.h"
//#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

procedure ScSupMut0;
procedure ScSupMut1;
procedure ScSupMut2;
procedure ScSupMut3;

procedure combat;
procedure goto_follmap;

variable tmp_herebefore;
variable tmp_hostile;
variable initial := 0;
variable in_timed_event;
variable weaponPtr;


procedure start begin
   if not(initial) then begin
      initial := 1;
      set_self_team(TEAM_NECROPOLIS_MUTANT);
      set_self_ai(AI_SUPER_MUTANT_NORMAL);
      self_rotate(random(0, 5));
      if (local_var(1) == 0) then begin
         set_local_var(1, 1);
         weaponPtr := create_object(PID_MINIGUN, 0, 0);
         add_obj_to_inven(self_obj, weaponPtr);
         wield_obj_critter(self_obj, weaponPtr);
         add_obj_to_inven(self_obj, create_object(PID_5MM_JHP, 0, 0));
      end
   end
end

procedure critter_p_proc begin
   if (global_var(GVAR_ENEMY_FOLL_INVADERS)) then begin
      tmp_hostile := 1;
   end
   if (tmp_hostile and self_can_see_dude) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin
      if (not(in_timed_event)) then begin
         in_timed_event := 1;
         add_timer_event(self_obj, game_ticks(random(6, 10)), random(1, 3));
      end
      if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
         if (local_var(0) == 0) then begin
            dialogue_system_enter;
         end
      end
   end
end

procedure destroy_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_FOLL_INVADERS, 1);
   end
   inc_evil_critter
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(message_str(NAME, 100));
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure talk_p_proc begin
   script_overrides;
   dude_look_at_self;
   if (local_var(0)) then begin
      call ScSupMut3;
   end
   else begin
      set_local_var(0, 1);
      start_dialog_at_node(ScSupMut0);
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then
      self_rotate(random(0, 5));
   else
      self_walk_to_tile(tile_num_in_direction(self_tile, random(0, 5), random(1, 3)));
   in_timed_event := 0;
end

procedure ScSupMut0 begin
   gsay_reply(NAME, 101);
   giq_option(-3, NAME, 102, combat, NEUTRAL_REACTION);
   giq_option(4, NAME, 103, goto_follmap, NEUTRAL_REACTION);
   giq_option(4, NAME, 104, ScSupMut1, NEUTRAL_REACTION);
   giq_option(4, NAME, 105, combat, NEUTRAL_REACTION);
end

procedure ScSupMut1 begin
   gsay_reply(NAME, 106);
   giq_option(4, NAME, 107, goto_follmap, NEUTRAL_REACTION);
   giq_option(4, NAME, 108, ScSupMut2, NEUTRAL_REACTION);
   giq_option(4, NAME, 109, combat, NEUTRAL_REACTION);
end

procedure ScSupMut2 begin
   gsay_message(NAME, 110, NEUTRAL_REACTION);
end

procedure ScSupMut3 begin
   float_msg(self_obj, message_str(NAME, 111), FLOAT_MSG_NORMAL);
end

procedure combat begin
   tmp_hostile := 1;
end

procedure goto_follmap begin
   load_map("lafollwr.map", 10);
end
