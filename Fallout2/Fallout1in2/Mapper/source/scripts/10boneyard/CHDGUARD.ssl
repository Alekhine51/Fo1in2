/*

   Boneyard - Super Mutant invader

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_CHDGUARD
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_BONEYARD)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

procedure ChdGuard0;
procedure ChdGuard1;
procedure ChdGuard2;
procedure ChdGuard3;
procedure ChdGuard4;
procedure ChdGuard5;
procedure ChdGuard6;
procedure ChdGuard7;
procedure ChdGuard8;
procedure ChdGuard9;
procedure ChdGuard10;
procedure ChdGuard11;
procedure ChdGuard12;
procedure ChdGuard13;
procedure ChdGuard14;
procedure ChdGuard15;
procedure ChdGuard16;
procedure ChdGuard17;
procedure ChdGuard17a;
procedure ChdGuard18;
procedure ChdGuard19;
procedure ChdGuard20;
procedure ChdGuard21;
procedure ChdGuard22;
procedure ChdGuard23;
procedure ChdGuard24;
procedure ChdGuard25;
procedure ChdGuard26;
procedure ChdGuard27;
procedure ChdGuard28;
procedure ChdGuard29;
procedure ChdGuard30;
procedure ChdGuard31;
procedure ChdGuard32;
procedure ChdGuard33;
procedure ChdGuard34;
procedure ChdGuard35;
procedure ChdGuardend;
procedure combat;
procedure to_orfeo;

import variable Orfeo_ptr;

variable in_timed_event;
variable weaponPtr;
variable tmp_hostile;
variable initial := 0;

procedure start begin
   if not(initial) then begin
      initial := 1;
      set_self_team(TEAM_CATHEDRAL);
      set_self_ai(AI_BRAINWASHED_CHILDREN);
      self_rotate(random(0, 5));
      if (local_var(1) == 0) then begin
         set_local_var(1, 1);
         weaponPtr := create_object(PID_10MM_SMG, 0, 0);
         add_obj_to_inven(self_obj, weaponPtr);
         wield_obj_critter(self_obj, weaponPtr);
         add_obj_to_inven(self_obj, create_object(PID_10MM_JHP, 0, 0));
      end
   end
end

procedure critter_p_proc begin
   if (global_var(GVAR_ENEMY_FOLL_INVADERS)) then begin
      tmp_hostile := 1;
   end
   if (tmp_hostile and self_can_see_dude) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin
      if (not(in_timed_event)) then begin
         in_timed_event := 1;
         add_timer_event(self_obj, game_ticks(random(6, 10)), random(1, 3));
      end
      if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
         if (local_var(0) == 0) then begin
            dialogue_system_enter;
         end
      end
   end
end

procedure destroy_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_FOLL_INVADERS, 1);
   end
   inc_evil_critter
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure talk_p_proc begin
   script_overrides;
   dude_look_at_self;

   if (local_var(0)) then begin
      start_dialog_at_node(ChdGuard35);
   end
   else begin
      set_local_var(0, 1);
      start_dialog_at_node(ChdGuard0);
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then
      self_rotate(random(0, 5));
   else
      self_walk_to_tile(tile_num_in_direction(self_tile, random(0, 5), random(1, 3)));
   in_timed_event := 0;
end

procedure ChdGuard0 begin
   Reply(101);
   NLowOption(102, ChdGuard1);
   NOption(103, ChdGuard13, 4);
   NOption(104, ChdGuard25, 4);
   NOption(105, ChdGuard26, 6);
   NOption(106, ChdGuard27, 6);
end

procedure ChdGuard1 begin
   Reply(107);
   NLowOption(108, ChdGuard2);
   NLowOption(109, combat);
   NLowOption(110, ChdGuard9);
end

procedure ChdGuard2 begin
   Reply(111);
   NLowOption(112, combat);
   NLowOption(113, ChdGuard3);
   NLowOption(114, ChdGuard4);
end

procedure ChdGuard3 begin
   NMessage(115);
end

procedure ChdGuard4 begin
   Reply(116);
   NLowOption(117, ChdGuard5);
   NLowOption(118, combat);
   NLowOption(119, ChdGuard6);
end

procedure ChdGuard5 begin
   NMessage(120);
end

procedure ChdGuard6 begin
   Reply(121);
   NLowOption(122, ChdGuard7);
   NLowOption(123, ChdGuard5);
   NLowOption(124, ChdGuard8);
end

procedure ChdGuard7 begin
   NMessage(125);
end

procedure ChdGuard8 begin
   NMessage(126);
end

procedure ChdGuard9 begin
   Reply(127);
   NLowOption(128, ChdGuard10);
   NLowOption(129, ChdGuard12);
   NLowOption(130, ChdGuardend);
end

procedure ChdGuard10 begin
   Reply(131);
   NLowOption(132, ChdGuard11);
   NLowOption(133, ChdGuardend);
end

procedure ChdGuard11 begin
   NMessage(134);
end

procedure ChdGuard12 begin
   Reply(135);
   NLowOption(136, ChdGuardend);
end

procedure ChdGuard13 begin
   Reply(137);
   NOption(138, ChdGuard14, 4);
   NOption(139, ChdGuard15, 4);
   NOption(mstr(140) + dude_name + mstr(141), ChdGuard22, 4);
   NOption(142, ChdGuard24, 4);
   NOption(143, combat, 4);
end

procedure ChdGuard14 begin
   NMessage(144);
   call to_orfeo;
end

procedure ChdGuard15 begin
   Reply(145);
   NOption(146, ChdGuard16, 4);
   NOption(147, ChdGuard17, 4);
end

procedure ChdGuard16 begin
   NMessage(148);
   call to_orfeo;
end

procedure ChdGuard17 begin
   Reply(149);
   NOption(mstr(150) + dude_name + mstr(151), ChdGuard17a, 4);
   NOption(152, ChdGuard20, 4);
   NOption(153, combat, 4);
end

procedure ChdGuard17a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call ChdGuard18;
   end
   else begin
      call ChdGuard19;
   end
end

procedure ChdGuard18 begin
   NMessage(154);
end

procedure ChdGuard19 begin
   NMessage(155);
   call combat;
end

procedure ChdGuard20 begin
   Reply(156);
   NOption(mstr(157) + dude_name + mstr(158), ChdGuard21, 4);
   NOption(159, combat, 4);
end

procedure ChdGuard21 begin
   NMessage(160);
   call ChdGuard17a;
end

procedure ChdGuard22 begin
   Reply(mstr(161) + dude_name + mstr(162));
   NOption(163, ChdGuard23, 4);
   NOption(164, ChdGuard23, 4);
   NOption(165, combat, 4);
end

procedure ChdGuard23 begin
   NMessage(166);
   call combat;
end

procedure ChdGuard24 begin
   NMessage(167);
   call combat;
end

procedure ChdGuard25 begin
   Reply(168);
   NOption(169, ChdGuard14, 4);
   NOption(170, ChdGuard15, 4);
   NOption(mstr(171) + dude_name + mstr(172), ChdGuard22, 4);
   NOption(173, ChdGuard24, 4);
   NOption(174, combat, 4);
end

procedure ChdGuard26 begin
   NMessage(175);
   call combat;
end

procedure ChdGuard27 begin
   Reply(176);
   NOption(177, ChdGuard28, 6);
   NOption(178, ChdGuard29, 6);
   NOption(179, ChdGuard30, 6);
   NOption(180, ChdGuard34, 6);
end

procedure ChdGuard28 begin
   NMessage(181);
end

procedure ChdGuard29 begin
   NMessage(182);
end

procedure ChdGuard30 begin
   Reply(183);
   NOption(184, ChdGuard31, 6);
   NOption(185, ChdGuard32, 6);
   NOption(186, combat, 6);
end

procedure ChdGuard31 begin
   NMessage(187);
   call to_orfeo;
end

procedure ChdGuard32 begin
   Reply(188);
   NOption(189, ChdGuard33, 6);
   NOption(190, ChdGuard33, 6);
   NOption(191, combat, 6);
end

procedure ChdGuard33 begin
   Reply(192);
   NOption(193, ChdGuardend, 6);
   NOption(194, combat, 6);
end

procedure ChdGuard34 begin
   NMessage(195);
   call combat;
end

procedure ChdGuard35 begin
   NMessage(196);
   call combat;
end

procedure ChdGuardend begin
end

procedure combat begin
   tmp_hostile := 1;
end

procedure to_orfeo begin
   load_map("lafollwr.map", 11);
end
