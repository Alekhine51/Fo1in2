/*

   Boneyard - Super Mutant invader

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_CHDGUARD
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_BONEYARD)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

procedure ChdGuard0;
procedure ChdGuard1;
procedure ChdGuard2;
procedure ChdGuard3;
procedure ChdGuard4;
procedure ChdGuard5;
procedure ChdGuard6;
procedure ChdGuard7;
procedure ChdGuard8;
procedure ChdGuard9;
procedure ChdGuard10;
procedure ChdGuard11;
procedure ChdGuard12;
procedure ChdGuard13;
procedure ChdGuard14;
procedure ChdGuard15;
procedure ChdGuard16;
procedure ChdGuard17;
procedure ChdGuard17a;
procedure ChdGuard18;
procedure ChdGuard19;
procedure ChdGuard20;
procedure ChdGuard21;
procedure ChdGuard22;
procedure ChdGuard23;
procedure ChdGuard24;
procedure ChdGuard25;
procedure ChdGuard26;
procedure ChdGuard27;
procedure ChdGuard28;
procedure ChdGuard29;
procedure ChdGuard30;
procedure ChdGuard31;
procedure ChdGuard32;
procedure ChdGuard33;
procedure ChdGuard34;
procedure ChdGuard35;
procedure ChdGuardend;
procedure combat;
procedure to_orfeo;

import variable Orfeo_ptr;

variable in_timed_event;
variable weaponPtr;
variable tmp_hostile;
variable initial := 0;

procedure start begin
   if not(initial) then begin
      initial := 1;
      set_self_team(TEAM_CATHEDRAL);
      set_self_ai(AI_BRAINWASHED_CHILDREN);
      self_rotate(random(0, 5));
      if (local_var(1) == 0) then begin
         set_local_var(1, 1);
         weaponPtr := create_object(PID_10MM_SMG, 0, 0);
         add_obj_to_inven(self_obj, weaponPtr);
         wield_obj_critter(self_obj, weaponPtr);
         add_obj_to_inven(self_obj, create_object(PID_10MM_JHP, 0, 0));
      end
   end
end

procedure critter_p_proc begin
   if (global_var(GVAR_ENEMY_FOLL_INVADERS)) then begin
      tmp_hostile := 1;
   end
   if (tmp_hostile and self_can_see_dude) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin
      if (not(in_timed_event)) then begin
         in_timed_event := 1;
         add_timer_event(self_obj, game_ticks(random(6, 10)), random(1, 3));
      end
      if (self_can_see_dude and (tile_distance_objs(self_obj, dude_obj) < 6)) then begin
         if (local_var(0) == 0) then begin
            dialogue_system_enter;
         end
      end
   end
end

procedure destroy_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_FOLL_INVADERS, 1);
   end
   inc_evil_critter
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(message_str(NAME, 100));
end

procedure talk_p_proc begin
   script_overrides;
   dude_look_at_self;

   if (local_var(0)) then begin
      start_dialog_at_node(ChdGuard35);
   end
   else begin
      set_local_var(0, 1);
      start_dialog_at_node(ChdGuard0);
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then
      self_rotate(random(0, 5));
   else
      self_walk_to_tile(tile_num_in_direction(self_tile, random(0, 5), random(1, 3)));
   in_timed_event := 0;
end

procedure ChdGuard0 begin
   gsay_reply(NAME, 101);
   giq_option(-3, NAME, 102, ChdGuard1, NEUTRAL_REACTION);
   giq_option(4, NAME, 103, ChdGuard13, NEUTRAL_REACTION);
   giq_option(4, NAME, 104, ChdGuard25, NEUTRAL_REACTION);
   giq_option(6, NAME, 105, ChdGuard26, NEUTRAL_REACTION);
   giq_option(6, NAME, 106, ChdGuard27, NEUTRAL_REACTION);
end

procedure ChdGuard1 begin
   gsay_reply(NAME, 107);
   giq_option(-3, NAME, 108, ChdGuard2, NEUTRAL_REACTION);
   giq_option(-3, NAME, 109, combat, NEUTRAL_REACTION);
   giq_option(-3, NAME, 110, ChdGuard9, NEUTRAL_REACTION);
end

procedure ChdGuard2 begin
   gsay_reply(NAME, 111);
   giq_option(-3, NAME, 112, combat, NEUTRAL_REACTION);
   giq_option(-3, NAME, 113, ChdGuard3, NEUTRAL_REACTION);
   giq_option(-3, NAME, 114, ChdGuard4, NEUTRAL_REACTION);
end

procedure ChdGuard3 begin
   gsay_message(NAME, 115, NEUTRAL_REACTION);
end

procedure ChdGuard4 begin
   gsay_reply(NAME, 116);
   giq_option(-3, NAME, 117, ChdGuard5, NEUTRAL_REACTION);
   giq_option(-3, NAME, 118, combat, NEUTRAL_REACTION);
   giq_option(-3, NAME, 119, ChdGuard6, NEUTRAL_REACTION);
end

procedure ChdGuard5 begin
   gsay_message(NAME, 120, NEUTRAL_REACTION);
end

procedure ChdGuard6 begin
   gsay_reply(NAME, 121);
   giq_option(-3, NAME, 122, ChdGuard7, NEUTRAL_REACTION);
   giq_option(-3, NAME, 123, ChdGuard5, NEUTRAL_REACTION);
   giq_option(-3, NAME, 124, ChdGuard8, NEUTRAL_REACTION);
end

procedure ChdGuard7 begin
   gsay_message(NAME, 125, NEUTRAL_REACTION);
end

procedure ChdGuard8 begin
   gsay_message(NAME, 126, NEUTRAL_REACTION);
end

procedure ChdGuard9 begin
   gsay_reply(NAME, 127);
   giq_option(-3, NAME, 128, ChdGuard10, NEUTRAL_REACTION);
   giq_option(-3, NAME, 129, ChdGuard12, NEUTRAL_REACTION);
   giq_option(-3, NAME, 130, ChdGuardend, NEUTRAL_REACTION);
end

procedure ChdGuard10 begin
   gsay_reply(NAME, 131);
   giq_option(-3, NAME, 132, ChdGuard11, NEUTRAL_REACTION);
   giq_option(-3, NAME, 133, ChdGuardend, NEUTRAL_REACTION);
end

procedure ChdGuard11 begin
   gsay_message(NAME, 134, NEUTRAL_REACTION);
end

procedure ChdGuard12 begin
   gsay_reply(NAME, 135);
   giq_option(-3, NAME, 136, ChdGuardend, NEUTRAL_REACTION);
end

procedure ChdGuard13 begin
   gsay_reply(NAME, 137);
   giq_option(4, NAME, 138, ChdGuard14, NEUTRAL_REACTION);
   giq_option(4, NAME, 139, ChdGuard15, NEUTRAL_REACTION);
   giq_option(4, NAME, message_str(NAME, 140) + dude_name + message_str(NAME, 141), ChdGuard22, NEUTRAL_REACTION);
   giq_option(4, NAME, 142, ChdGuard24, NEUTRAL_REACTION);
   giq_option(4, NAME, 143, combat, NEUTRAL_REACTION);
end

procedure ChdGuard14 begin
   gsay_message(NAME, 144, NEUTRAL_REACTION);
   call to_orfeo;
end

procedure ChdGuard15 begin
   gsay_reply(NAME, 145);
   giq_option(4, NAME, 146, ChdGuard16, NEUTRAL_REACTION);
   giq_option(4, NAME, 147, ChdGuard17, NEUTRAL_REACTION);
end

procedure ChdGuard16 begin
   gsay_message(NAME, 148, NEUTRAL_REACTION);
   call to_orfeo;
end

procedure ChdGuard17 begin
   gsay_reply(NAME, 149);
   giq_option(4, NAME, message_str(NAME, 150) + dude_name + message_str(NAME, 151), ChdGuard17a, NEUTRAL_REACTION);
   giq_option(4, NAME, 152, ChdGuard20, NEUTRAL_REACTION);
   giq_option(4, NAME, 153, combat, NEUTRAL_REACTION);
end

procedure ChdGuard17a begin
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then begin
      call ChdGuard18;
   end
   else begin
      call ChdGuard19;
   end
end

procedure ChdGuard18 begin
   gsay_message(NAME, 154, NEUTRAL_REACTION);
end

procedure ChdGuard19 begin
   gsay_message(NAME, 155, NEUTRAL_REACTION);
   call combat;
end

procedure ChdGuard20 begin
   gsay_reply(NAME, 156);
   giq_option(4, NAME, message_str(NAME, 157) + dude_name + message_str(NAME, 158), ChdGuard21, NEUTRAL_REACTION);
   giq_option(4, NAME, 159, combat, NEUTRAL_REACTION);
end

procedure ChdGuard21 begin
   gsay_message(NAME, 160, NEUTRAL_REACTION);
   call ChdGuard17a;
end

procedure ChdGuard22 begin
   gsay_reply(NAME, message_str(NAME, 161) + dude_name + message_str(NAME, 162));
   giq_option(4, NAME, 163, ChdGuard23, NEUTRAL_REACTION);
   giq_option(4, NAME, 164, ChdGuard23, NEUTRAL_REACTION);
   giq_option(4, NAME, 165, combat, NEUTRAL_REACTION);
end

procedure ChdGuard23 begin
   gsay_message(NAME, 166, NEUTRAL_REACTION);
   call combat;
end

procedure ChdGuard24 begin
   gsay_message(NAME, 167, NEUTRAL_REACTION);
   call combat;
end

procedure ChdGuard25 begin
   gsay_reply(NAME, 168);
   giq_option(4, NAME, 169, ChdGuard14, NEUTRAL_REACTION);
   giq_option(4, NAME, 170, ChdGuard15, NEUTRAL_REACTION);
   giq_option(4, NAME, message_str(NAME, 171) + dude_name + message_str(NAME, 172), ChdGuard22, NEUTRAL_REACTION);
   giq_option(4, NAME, 173, ChdGuard24, NEUTRAL_REACTION);
   giq_option(4, NAME, 174, combat, NEUTRAL_REACTION);
end

procedure ChdGuard26 begin
   gsay_message(NAME, 175, NEUTRAL_REACTION);
   call combat;
end

procedure ChdGuard27 begin
   gsay_reply(NAME, 176);
   giq_option(6, NAME, 177, ChdGuard28, NEUTRAL_REACTION);
   giq_option(6, NAME, 178, ChdGuard29, NEUTRAL_REACTION);
   giq_option(6, NAME, 179, ChdGuard30, NEUTRAL_REACTION);
   giq_option(6, NAME, 180, ChdGuard34, NEUTRAL_REACTION);
end

procedure ChdGuard28 begin
   gsay_message(NAME, 181, NEUTRAL_REACTION);
end

procedure ChdGuard29 begin
   gsay_message(NAME, 182, NEUTRAL_REACTION);
end

procedure ChdGuard30 begin
   gsay_reply(NAME, 183);
   giq_option(6, NAME, 184, ChdGuard31, NEUTRAL_REACTION);
   giq_option(6, NAME, 185, ChdGuard32, NEUTRAL_REACTION);
   giq_option(6, NAME, 186, combat, NEUTRAL_REACTION);
end

procedure ChdGuard31 begin
   gsay_message(NAME, 187, NEUTRAL_REACTION);
   call to_orfeo;
end

procedure ChdGuard32 begin
   gsay_reply(NAME, 188);
   giq_option(6, NAME, 189, ChdGuard33, NEUTRAL_REACTION);
   giq_option(6, NAME, 190, ChdGuard33, NEUTRAL_REACTION);
   giq_option(6, NAME, 191, combat, NEUTRAL_REACTION);
end

procedure ChdGuard33 begin
   gsay_reply(NAME, 192);
   giq_option(6, NAME, 193, ChdGuardend, NEUTRAL_REACTION);
   giq_option(6, NAME, 194, combat, NEUTRAL_REACTION);
end

procedure ChdGuard34 begin
   gsay_message(NAME, 195, NEUTRAL_REACTION);
   call combat;
end

procedure ChdGuard35 begin
   gsay_message(NAME, 196, NEUTRAL_REACTION);
   call combat;
end

procedure ChdGuardend begin
end

procedure combat begin
   tmp_hostile := 1;
end

procedure to_orfeo begin
   load_map("lafollwr.map", 11);
end
