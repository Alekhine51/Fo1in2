/*

	Hub - Decker

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_DECKER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */

procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;

procedure PlayerQuestions;
procedure Decker01;
procedure Decker02;
procedure Decker03;
procedure Decker04;
procedure Decker05;
procedure Decker06;
procedure Decker07;
procedure Decker08;
procedure Decker09;
procedure Decker10;
procedure Decker11;
procedure Decker12;
procedure Decker13;
procedure Decker14;
procedure Decker15;
procedure Decker16;
procedure Decker17;
procedure Decker18;
procedure Decker19;
procedure Decker25;
procedure Decker26;
procedure Decker27;
procedure Decker28;
procedure Decker29;
procedure Decker30;
procedure Decker31;
procedure Decker32;
procedure Decker33;
procedure Decker34;
procedure Decker35;
procedure Decker36;
procedure DeckerEndAcceptJob1;
procedure DeckerEndDeclineJob1;
procedure DeckerEndAcceptJob2;
procedure DeckerEndDeclineJob2;
procedure DeckerEndInsult;
procedure DeckerEndNormal;
procedure DeckerTransport;

variable tmp_hostile;
variable Only_Once := 1;
variable travel;

import variable Kane_Ptr;
import variable Decker_Ptr;

procedure start begin
	if Only_Once then begin
		Only_Once := 0;
		Decker_Ptr := self_obj;
		if (map_var(50) == 1) then begin
			if not(is_loading_game) then begin    set_self_invisible;    end
		end
		set_self_team(TEAM_HUB_UNDERGROUND );
		set_self_ai( AI_DECKER );
	end
end

procedure combat
begin
	tmp_hostile := 1;
end

procedure critter_p_proc
begin
	if (tmp_hostile) then begin
		tmp_hostile := 0;
		attack(dude_obj);
	end
	if (travel == 1) then begin
		travel := 0;
		call DeckerTransport;
	end
	else begin
		if (tile_distance_objs(self_obj, dude_obj) <= 10) then begin
			dialogue_system_enter;
		end
	end
end

procedure pickup_p_proc
begin
	if (source_obj == dude_obj) then begin
		tmp_hostile := 1;
	end
end

procedure talk_p_proc
begin
	dude_look_at_self;
	set_global_var( GVAR_DECKER_KNOWN, 1 );
	get_reaction
	if ((map_var(49) == 1) or (map_var(45) != 1)) then begin
		if (map_var(52) == 0) then begin
			float_msg( self_obj, message_str(NAME, 230), FLOAT_MSG_RED );
			call combat;
		end
		else begin
			float_msg( self_obj, message_str(NAME, 231), FLOAT_MSG_RED );
			call combat;
		end
	end
	else begin
		set_map_var(45, 0);
		if (local_var(4) == 0) then begin
			set_local_var(4, 1);
			start_gdialog(42, self_obj, 4, 7, 3);
			gsay_start;
			call Decker01;
			gsay_end;
			end_dialogue;
		end
		else begin
			if (global_var( GVAR_KILL_JAIN ) == 2) then begin
				start_gdialog(42, self_obj, 4, 7, 3);
				gsay_start;
				call Decker15;
				gsay_end;
				end_dialogue;
			end
			else begin
				if (global_var( GVAR_KILL_MERCHANT ) == 2) then begin
					start_gdialog(42, self_obj, 4, 7, 3);
					gsay_start;
					call Decker26;
					gsay_end;
					end_dialogue;
				end
			end
		end
	end
end

procedure destroy_p_proc begin
	inc_evil_critter
	set_map_var(50, 1);
	set_global_var( GVAR_DECKER_STATUS, 1 );
	if ((map_var(49) == 1) and (map_var(50) == 1)) then begin
		set_global_var( GVAR_UNDERGROUND_STATUS, 1 );
		set_map_var(11, 1);
		set_map_var(44, 1);
	end
end

procedure look_at_p_proc
begin
	script_overrides;
	display_msg(message_str(NAME, 100));
end

procedure PlayerQuestions
begin
	giq_option( 4, NAME, 144, Decker17, NEUTRAL_REACTION );
	giq_option( 4, NAME, 145, Decker25, NEUTRAL_REACTION );
	giq_option( 4, NAME, 146, DeckerEndNormal, NEUTRAL_REACTION );
end

procedure Decker01
begin
	gsay_reply( NAME, 103 );
	giq_option( 4, NAME, message_str(NAME, 104) + dude_name + message_str(NAME, 105), Decker02, NEUTRAL_REACTION );
	giq_option( 4, NAME, 106, Decker13, BAD_REACTION );
end

procedure Decker02
begin
	gsay_reply( NAME, 107 );
	giq_option( 4, NAME, 108, Decker03, NEUTRAL_REACTION );
	giq_option( 4, NAME, 109, Decker14, NEUTRAL_REACTION );
end

procedure Decker03
begin
	gsay_reply( NAME, 110 );
	giq_option( 4, NAME, 111, Decker04, NEUTRAL_REACTION );
end

procedure Decker04
begin
	gsay_reply( NAME, 112 );
	giq_option( 4, NAME, 113, Decker05, NEUTRAL_REACTION );
	giq_option( 4, NAME, 114, Decker11, NEUTRAL_REACTION );
	giq_option( 4, NAME, 115, Decker10, BAD_REACTION );
end

procedure Decker05
begin
	gsay_reply( NAME, 116 );
	giq_option( 4, NAME, 117, Decker06, NEUTRAL_REACTION );
	giq_option( 4, NAME, 118, Decker10, NEUTRAL_REACTION );
	giq_option( 4, NAME, 119, Decker06, NEUTRAL_REACTION );
end

procedure Decker06
begin
	gsay_reply( NAME, 120 );
	giq_option( 4, NAME, 121, Decker07, NEUTRAL_REACTION );
end

procedure Decker07
begin
	gsay_reply( NAME, 122 );
	giq_option( 4, NAME, 123, Decker08, NEUTRAL_REACTION );
	giq_option( 4, NAME, 124, Decker09, NEUTRAL_REACTION );
	giq_option( 4, NAME, 125, Decker10, NEUTRAL_REACTION );
end

procedure Decker08
begin
	gsay_message( NAME, 126, NEUTRAL_REACTION );
	call DeckerEndAcceptJob1;
end

procedure Decker09
begin
	gsay_reply( NAME, 127 );
	giq_option( 4, NAME, 128, Decker08, NEUTRAL_REACTION );
	giq_option( 4, NAME, 129, Decker10, NEUTRAL_REACTION );
end

procedure Decker10
begin
	gsay_message( NAME, 130, NEUTRAL_REACTION );
	call DeckerEndDeclineJob1;
end

procedure Decker11
begin
	gsay_reply( NAME, 131 );
	giq_option( 4, NAME, 132, Decker10, NEUTRAL_REACTION );
	giq_option( 4, NAME, 133, Decker12, NEUTRAL_REACTION );
end

procedure Decker12
begin
	gsay_message( NAME, 134, NEUTRAL_REACTION );
	call DeckerEndAcceptJob1;
end

procedure Decker13
begin
	gsay_reply( NAME, 135 );
	giq_option( 4, NAME, message_str(NAME, 136) + dude_name + message_str(NAME, 137), Decker02, NEUTRAL_REACTION );
	giq_option( 4, NAME, 138, Decker14, NEUTRAL_REACTION );
end

procedure Decker14
begin
	gsay_message( NAME, 139, BAD_REACTION );
	call DeckerEndInsult;
end

procedure Decker15
begin
	gsay_reply( NAME, 140 );
	giq_option( 4, NAME, 141, Decker16, NEUTRAL_REACTION );
	giq_option( 4, NAME, 142, DeckerEndNormal, NEUTRAL_REACTION );
end

procedure Decker16
begin
	gsay_reply( NAME, 143 );
	call PlayerQuestions;
end

procedure Decker17
begin
	gsay_reply( NAME, 148 );
	giq_option( 4, NAME, 149, Decker18, NEUTRAL_REACTION );
	giq_option( 4, NAME, 150, Decker16, NEUTRAL_REACTION );
end

procedure Decker18
begin
	gsay_reply( NAME, 151 );
	giq_option( 4, NAME, 152, Decker19, NEUTRAL_REACTION );
	giq_option( 4, NAME, 153, Decker16, NEUTRAL_REACTION );
end

procedure Decker19
begin
	gsay_reply( NAME, 154 );
	giq_option( 4, NAME, 155, Decker16, NEUTRAL_REACTION );
end

procedure Decker25
begin
	gsay_reply( NAME, 167 );
	call PlayerQuestions;
end

procedure Decker26
begin
	if (dude_is_male) then begin
		gsay_reply( NAME, 232 );
	end
	else begin
		gsay_reply( NAME, 233 );
	end
	giq_option( 4, NAME, 169, Decker27, NEUTRAL_REACTION );
	giq_option( 4, NAME, 170, Decker35, BAD_REACTION );
end

procedure Decker27
begin
	gsay_reply( NAME, 171 );
	giq_option( 4, NAME, 172, Decker28, NEUTRAL_REACTION );
	giq_option( 4, NAME, 173, Decker35, BAD_REACTION );
end

procedure Decker28
begin
	gsay_reply( NAME, 174 );
	giq_option( 4, NAME, 175, Decker29, NEUTRAL_REACTION );
end

procedure Decker29
begin
	gsay_reply( NAME, 176 );
	giq_option( 4, NAME, 177, Decker30, NEUTRAL_REACTION );
	giq_option( 4, NAME, 178, Decker32, BAD_REACTION );
end

procedure Decker30
begin
	UpReact
	gsay_reply( NAME, 179 );
	giq_option( 4, NAME, 180, Decker31, NEUTRAL_REACTION );
end

procedure Decker31
begin
	gsay_message( NAME, 181, NEUTRAL_REACTION );
	call DeckerEndAcceptJob2;
end

procedure Decker32
begin
	gsay_reply( NAME, 182 );
	giq_option( 4, NAME, 183, Decker33, NEUTRAL_REACTION );
	giq_option( 4, NAME, 184, Decker34, NEUTRAL_REACTION );
end

procedure Decker33
begin
	gsay_reply( NAME, 185 );
	giq_option( 4, NAME, 186, Decker31, NEUTRAL_REACTION );
end

procedure Decker34
begin
	if (dude_is_male) then begin
		gsay_message( NAME, 234, BAD_REACTION );
	end
	else begin
		gsay_message( NAME, 235, BAD_REACTION );
	end
	call DeckerEndDeclineJob2;
end

procedure Decker35
begin
	gsay_reply( NAME, 188 );
	giq_option( 4, NAME, 189, Decker36, NEUTRAL_REACTION );
	giq_option( 4, NAME, 190, Decker28, NEUTRAL_REACTION );
end

procedure Decker36
begin
	gsay_message( NAME, 191, BAD_REACTION );
	call DeckerEndDeclineJob2;
end

procedure DeckerEndAcceptJob1
begin
	set_map_var(46, 2);
	set_global_var( GVAR_KILL_MERCHANT, 1 );
	travel := 1;
end

procedure DeckerEndDeclineJob1
begin
	set_map_var(46, 1);
	set_map_var(11, 1);
	set_global_var( GVAR_KILL_MERCHANT, 0 );
	travel := 1;
end

procedure DeckerEndAcceptJob2
begin
	set_map_var(47, 3);
	set_global_var( GVAR_KILL_JAIN, 1 );
	travel := 1;
end

procedure DeckerEndDeclineJob2
begin
	set_map_var(47, 2);
	set_map_var(11, 1);
	set_global_var( GVAR_KILL_JAIN, 0 );
	travel := 1;
end

procedure DeckerEndInsult
begin
	set_map_var(46, 1);
	set_map_var(11, 1);
	set_map_var(44, 1);
	travel := 1;
end

procedure DeckerEndNormal
begin
	travel := 1;
end

procedure DeckerTransport begin
	gfade_out(1);
	move_to(Kane_Ptr, 24336, 0);
	move_to(dude_obj, 23736, 0);
	obj_rotate( Kane_Ptr, rotation_to_tile(tile_num(Kane_Ptr), dude_tile) );
	dude_rotate( rotation_to_tile(dude_tile, tile_num(Kane_Ptr)) );
	gfade_in(1);
end
