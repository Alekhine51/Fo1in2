/*

   Junktown - Bob
   TODO : This is cut content. Check if shit needs fixing. It probably does?

*/

/* Include Files */
#include "..\headers\define.h"
//#include "..\headers\necropolis.h"

#define NAME                    SCRIPT_JTBOB
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "..\headers\command.h"
#include "..\headers\modreact.h"

/* Standard Script Procedures */
procedure start;
procedure talk_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;

procedure bob0;
procedure bob1;
procedure bob2;
procedure bob3;
procedure bob4;
procedure bob5;
procedure bob6;
procedure bob7;
procedure bob8;
procedure bob9;
procedure bob10;
procedure bob11;
procedure bob12;
procedure bob13;
procedure bob14;
procedure bob15;
procedure bob16;
procedure bobend;
procedure combat;

variable Herebefore;
variable Days;
variable Met_Casino;
variable Has_Weapon;

procedure start begin
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure map_enter_p_proc begin
   // TODO: wtf?
   /*if (((GAME_TIME_IN_DAYS) - Days) >= 7) then begin
      kill_critter(self_obj, ANIM_stand);
   end*/

   // Cut content, remove for now:
   destroy_object(self_obj);
end

procedure talk_p_proc begin
   dude_look_at_self;
   if (Has_Weapon == 0) and (dude_is_armed) then begin
      Has_Weapon := 1;
      start_dialog_at_node(bob0);
   end
   else begin
      if (Met_Casino) then begin
         call bob9;
      end
      else if (Herebefore) then begin
         start_dialog_at_node(bob13);
      end
      else begin
         Herebefore := 1;
         Days := GAME_TIME_IN_DAYS;
         start_dialog_at_node(bob10);
      end
   end
end

procedure bob0 begin
   Reply(101);
   giq_option(-3, NAME, 102, bob1, NEUTRAL_REACTION);
   giq_option(4, NAME, 103, bob2, NEUTRAL_REACTION);
   giq_option(4, NAME, 104, bob3, NEUTRAL_REACTION);
   giq_option(5, NAME, 105, bob3, NEUTRAL_REACTION);
end

procedure bob1 begin
   NMessage(106);
end

procedure bob2 begin
   NMessage(107);
end

procedure bob3 begin
   Reply(108);
   giq_option(4, NAME, 109, bob4, NEUTRAL_REACTION);
   giq_option(6, NAME, 110, bob5, NEUTRAL_REACTION);
end

procedure bob4 begin
   // TODO: Needs to fetch item name??
   // Also completely wrong: It checks if dude is armed for right_hand, if not it returns left_hand? As Trump would say: WRONG!
   // 2nd message must be rewritten to something unarmed-like. Then first check must be changed to check the active hand.
   // Then we have to return the item name and print it out.
   // I'm not going to do that now, though.
   if (dude_is_armed) then begin
      NMessage(mstr(111) + obj_pid(dude_right_hand) + mstr(112));
   end
   else begin
      NMessage(mstr(113) + obj_pid(dude_left_hand) + mstr(114));
   end
end

procedure bob5 begin
   Reply(115);
   giq_option(6, NAME, 116, bob6, NEUTRAL_REACTION);
   giq_option(6, NAME, 117, bob7, NEUTRAL_REACTION);
   giq_option(6, NAME, 118, bob8, NEUTRAL_REACTION);
   giq_option(6, NAME, 119, bobend, NEUTRAL_REACTION);
end

procedure bob6 begin
   Reply(120);
   giq_option(6, NAME, 121, bob7, NEUTRAL_REACTION);
   giq_option(6, NAME, 122, bob8, NEUTRAL_REACTION);
   giq_option(6, NAME, 123, bobend, NEUTRAL_REACTION);
end

procedure bob7 begin
   Reply(124);
   giq_option(6, NAME, 125, bob6, NEUTRAL_REACTION);
   giq_option(6, NAME, 126, bob8, NEUTRAL_REACTION);
   giq_option(6, NAME, 127, bobend, NEUTRAL_REACTION);
end

procedure bob8 begin
   Reply(128);
   giq_option(6, NAME, 129, bob6, NEUTRAL_REACTION);
   giq_option(6, NAME, 130, bob7, NEUTRAL_REACTION);
   giq_option(6, NAME, 131, bobend, NEUTRAL_REACTION);
end

procedure bob9 begin
   float_msg(self_obj, mstr(132), FLOAT_MSG_NORMAL);
end

procedure bob10 begin
   Reply(133);
   giq_option(-3, NAME, 134, bob1, NEUTRAL_REACTION);
   giq_option(4, NAME, 135, bob2, NEUTRAL_REACTION);
   giq_option(4, NAME, 136, bob11, NEUTRAL_REACTION);
   giq_option(5, NAME, 137, bob5, NEUTRAL_REACTION);
end

procedure bob11 begin
   Reply(138);
   giq_option(4, NAME, 139, bobend, NEUTRAL_REACTION);
   giq_option(6, NAME, 140, bob12, NEUTRAL_REACTION);
end

procedure bob12 begin
   Reply(141);
   giq_option(6, NAME, 142, bob6, NEUTRAL_REACTION);
   giq_option(6, NAME, 143, bob7, NEUTRAL_REACTION);
   giq_option(6, NAME, 144, bob8, NEUTRAL_REACTION);
   giq_option(6, NAME, 145, bobend, NEUTRAL_REACTION);
end

procedure bob13 begin
   Reply(146);
   giq_option(-3, NAME, 147, bob1, NEUTRAL_REACTION);
   giq_option(4, NAME, 148, bob14, NEUTRAL_REACTION);
   giq_option(4, NAME, 149, bob15, NEUTRAL_REACTION);
   giq_option(6, NAME, 150, bob16, NEUTRAL_REACTION);
end

procedure bob14 begin
   NMessage(151);
end

procedure bob15 begin
   NMessage(152);
end

procedure bob16 begin
   Reply(153);
   giq_option(6, NAME, 154, bob6, NEUTRAL_REACTION);
   giq_option(6, NAME, 155, bob7, NEUTRAL_REACTION);
   giq_option(6, NAME, 156, bob8, NEUTRAL_REACTION);
   giq_option(6, NAME, 157, bobend, NEUTRAL_REACTION);
end

procedure bobend begin
end

procedure combat begin
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
end

procedure destroy_p_proc begin
   if (source_obj == dude_obj) then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
   inc_good_critter
end
