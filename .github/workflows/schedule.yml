name: Schedule

on:
 push:
  paths:
  - '.github/workflows/schedule.yml'
 schedule:
 - cron: 0 4 * * *

jobs:

 Maintenance:
  runs-on: windows-latest
  env:
   MOD_DIR:            "Fallout2/Fallout1in2"
   MOD_VERSION_STRING: "FALLOUT ET TU"
   MOD_VERSION_MAJOR:  0
  steps:

### Activity
### checks if there was any commits (excluding automated ones) in last week;
### if there was none, all steps are skipped and commit won't be generated

  - name: Clone
    uses: actions/checkout@master
    with:
     token: ${{ secrets.ANTALASKAYA_TOKEN }}
#    fetch-depth: 1

  - name:  Activity
    run:   |
           :
           timestamp_api=$(date -d "$(curl -s https://api.github.com/repos/$GITHUB_REPO/commits | jq -r '[.[] | select(.author.login != "antalaskaya")][0] | .commit.author.date')" +%s)
           timestamp_repo=$(git log --all --invert-grep --author="<${{ secrets.ANTALASKAYA_EMAIL }}>" --date=unix --format=%ad -1)
           days=$(( ( $(date --utc +%s) - $timestamp_repo ) / 86400 ))

           if [ $days -gt 2 ]; then
                echo "[WARNING] Repository activity : $days days ago"
           fi

           if [ $days -lt 8 ]; then
              echo ::group::Repository active
              echo "API  $timestamp_api"
              echo "Repo $timestamp_repo"
              echo ::set-env name=GHA_REPO_ALIVE::true
              echo ::set-env name=GHA_REPO_ACTIVITY::$days
              echo ::endgroup::
           else
              echo "[WARNING] Repository not updated : event<${{ github.event_name }}> not allowed to modify stale repository"
           fi
    shell: bash

### ReAttach HEAD
### prepares repository for commit

  - name:  ReAttach HEAD
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   git checkout $(echo "$GITHUB_REF" | awk -F / '{print $3}')
    shell: bash

### Major tasks
### always generates commit (if needed)

  # updates pre-release version of sfall (develop branch, ReleaseXP configuration)
  - name:  sfall-develop
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           SFALL_COMMIT=$(curl -Ls https://ci.appveyor.com/api/projects/rotators/sfall/branch/develop 2>/dev/null | jq -r '.build.commitId')
           curl -L "https://ci.appveyor.com/api/projects/rotators/sfall/artifacts/ddraw.dll?job=Configuration:%20ReleaseXP&branch=develop&pr=false" -o $MOD_DIR/ddraw.develop.dll

           SFALL_VERSION=$(powershell -command "(Get-Item $MOD_DIR/ddraw.develop.dll).VersionInfo.ProductVersion")
           echo "sfall-develop (v${SFALL_VERSION}, ${SFALL_COMMIT})"

           git diff --quiet || (git add --update && echo "- sfall-develop (v${SFALL_VERSION}, phobos2077/sfall@${SFALL_COMMIT})" >> $HOME/gha.commit)
    shell: bash

  # updates scripts sources to Rotators standards
  - name:  ReDefine run
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           scripts=$(grep "^ScriptsDir" Tools/ReDefine/ReDefine.cfg | awk '{print $3}' | sed -re 's!^[\.\/]+!!')
           headers=$(grep "^HeadersDir" Tools/ReDefine/ReDefine.cfg | awk '{print $3}' | sed -re 's!^[\.\/]+!!')

           Tools/ReDefine/ReDefine.exe --config Tools/ReDefine/ReDefine.cfg --scripts $scripts/ --headers $headers/ >/dev/null

           grep "^Changed " ReDefine.log || true
           rm ReDefine*.log
           git diff --quiet || (git add --update && echo ::set-env name=GHA_REDEFINE::true)
    shell: bash

  # updates scripts bytecode
  # excludes 'ReDefine run' step results (if any) when scripts cannot be compiled
  - name:  Scripts recompilation
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           ok=1
           .github/workflows/scripts.compile.sh --bytecode --optimization=1 || ok=0
           if [ $ok -eq 1 ]; then
              if [ "$GHA_REDEFINE" == "true" ]; then
                 echo "- ReDefine run" >> $HOME/gha.commit
              fi

              git diff --quiet || (git add --update && echo "- Scripts recompilation" >> $HOME/gha.commit)
           else
              if [ "$GHA_REDEFINE" == "true" ]; then
                 echo "[WARNING] Excluded: ReDefine run"
                 git reset HEAD  $MOD_DIR/Mapper/source/scripts/
                 git checkout -- $MOD_DIR/Mapper/source/scripts/
              fi
              echo "[WARNING] Excluded: Scripts recompilation"
              git checkout -- $MOD_DIR/mods/fo1_base/scripts/
           fi
    shell: bash

### Validation
### checks if any of major tasks wants to generate commit
### prepares commit message

  - name:  Validation
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           echo ::group::git status
           git status 2>&1
           echo ::endgroup::

           if [ -f "$HOME/gha.commit" ]; then
              sed -i '1s!^!Progress every day\n!' $HOME/gha.commit
              dos2unix $HOME/gha.commit
              echo ::set-env name=GHA_COMMIT::true
              cat $HOME/gha.commit
           fi
    shell: bash

### Minor tasks
### runs only if at least one of major tasks wants to generate commit

  # update ddraw.ini comment with ddraw.dll version
  # update ddraw.ini setting with mod version
  # update all configuration to use DOS line endings
  - name:  Configuration refresh
    if:    env.GHA_REPO_ALIVE == 'true' && env.GHA_COMMIT == 'true'
    run:   |
           :
           REPO_COMMITS=$(git rev-list HEAD --count)
           REPO_COMMITS=$((REPO_COMMITS+1))
           SFALL_VERSION=$(powershell -command "(Get-Item $MOD_DIR/ddraw.dll).VersionInfo.ProductVersion")

           dos2unix $MOD_DIR/ddraw.ini

           sed -ri "s!^;v[0-9\.]+.*!;v$SFALL_VERSION!" $MOD_DIR/ddraw.ini
           sed -ri "s!^[\t\ ]*VersionString[\t\ ]*=[\t\ ]*.+!VersionString=$MOD_VERSION_STRING $MOD_VERSION_MAJOR.$REPO_COMMITS!" $MOD_DIR/ddraw.ini

           grep "^;v" $MOD_DIR/ddraw.ini
           grep "^VersionString=" $MOD_DIR/ddraw.ini

           unix2dos $MOD_DIR/ddraw.ini
           git diff --quiet || (git add --update && echo "- Configuration refresh" >> $HOME/gha.commit)
    shell: bash

### Push
### generates and displays commit
### pushes generated commit to repository; available only for following events (any other triggers are for testing purposes):
### - schedule

  - name:  Push
    if:    env.GHA_REPO_ALIVE == 'true' && env.GHA_COMMIT == 'true'
    run:   |
           :
           echo ::group::git commit
           dos2unix $HOME/gha.commit
           git config --global user.name  "${{ secrets.ANTALASKAYA_NAME }}"
           git config --global user.email "${{ secrets.ANTALASKAYA_EMAIL }}"
           git commit --file="$HOME/gha.commit" 2>&1
           echo ::endgroup::

           echo ::group::git log
           git log -p -n 1 2>&1
           echo ::endgroup::

           if [ "${{ github.event_name }}" == "schedule" ]; then
              echo ::group::git push
              git push 2>&1
              echo ::endgroup::
           else
              echo "[WARNING] Repository not updated : event<${{ github.event_name }}> not allowed to modify repository"
           fi
    shell: bash
    continue-on-error: true
