name: Schedule

on:
 push:
  paths:
  - '.github/workflows/schedule.yml'
 schedule:
 - cron: 0 4 * * *

jobs:

 Maintenance:
  runs-on: windows-latest
  env:
   MOD_DIR:            "Fallout2/Fallout1in2"
   MOD_VERSION_STRING: "FALLOUT ET TU"
   MOD_VERSION_MAJOR:  0
  steps:

### Activity check
### uses GitHub API to check last non-automagic commit in repository
### if it's older than a week, all other steps are skipped

  - name:  Activity check
    run:   |
           :
           # old check, requires already cloned repository; left for reference
           # timestamp=$(git log --all --invert-grep --author="<${{ secrets.ANTALASKAYA_EMAIL }}>" --date=unix --format=%ad -1)

           curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/commits | jq -r '[.[] | select(.author.login != "antalaskaya")][0]' > $HOME/commit.json

           date="$(jq -r '.commit.author.date' $HOME/commit.json)"
           timestamp=$(date --utc -d "$date" +%s)
           author="$(jq -r '.commit.author.name' $HOME/commit.json)"
           url="$(jq -r '.html_url' $HOME/commit.json)"
           days=$(( ( $(date --utc +%s) - $timestamp ) / 86400 ))
           rm -f $HOME/commit.json

           echo "Repository activity : $timestamp $author $url"

           if [ $days -gt 2 ]; then
                echo "[WARNING] Repository activity : $days days ago"
           fi

           if [ $days -lt 8 ]; then
              echo ::group::Repository active
              echo ::set-env name=GHA_REPO_ALIVE::true
              echo ::set-env name=GHA_REPO_ACTIVITY::$days
              echo ::endgroup::
           else
              echo "[WARNING] Repository not updated : event<${{ github.event_name }}> not allowed to modify stale repository"
           fi
    shell: bash

### Preparations
### clones all interesting repositories used by tasks
### restores/creates cache used by tasks

  - name:  Clone sfall-develop
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   git clone --branch=develop https://github.com/phobos2077/sfall.git $HOME/sfall
    shell: bash

  - name: Clone FO1@2
    if:   env.GHA_REPO_ALIVE == 'true'
    uses: actions/checkout@master
    with:
     token: ${{ secrets.ANTALASKAYA_TOKEN }}
#    fetch-depth: 1

  - name:  ReAttach HEAD
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   git checkout $(echo "$GITHUB_REF" | awk -F / '{print $3}')
    shell: bash

  - name:  Preparations
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           old_sfall=$(git log --author="<${{ secrets.ANTALASKAYA_EMAIL }}>" | grep sfall-develop | awk -F @ '{print $2}' | tr -d ')')
           old_artifacts=$(git log --author="<${{ secrets.ANTALASKAYA_EMAIL }}>" | grep ModdersPack | awk -F @ '{print $2}' | tr -d ')')

           new_sfall=$(git -C $HOME/sfall log --pretty=format:%H -1 sfall)
           new_artifacts=$(git -C $HOME/sfall log --pretty=format:%H -1 artifacts)

           if [ "$old_sfall" != "$new_sfall" ]; then
              echo "::group::sfall-develop $old_sfall -> $new_sfall"
              echo ::set-env name=GHA_TASK_SFALL_BINARY::true
              echo ::endgroup::
           fi

           if [ "$old_artifacts" != "$new_artifacts" ]; then
              echo "::group::sfall-artifacts $old_artifacts -> $new_artifacts"
              echo ::set-env name=GHA_TASK_SFALL_ARTIFACTS::true
              echo ::endgroup::
           fi
    shell: bash

  - name: Cache (DirectX)
#   if:   env.GHA_REPO_ALIVE == 'true' && env.GHA_TASK_SFALL_BINARY == 'true'
    id:   cache-dx
    uses: actions/cache@v1
    with:
     path: ~/cache-dx
     key:  cache-dx

  - name:  Cache create (DirectX)
#   if:    GHA_REPO_ALIVE == 'true' && (env.GHA_TASK_SFALL_BINARY == 'true' && steps.cache-dx.outputs.cache-hit != 'true')
    run:   |
           :
           rm -f $HOME/cache-dx
           git clone https://github.com/foesmm/DirectX.git $HOME/cache-dx
           curl -L https://download.microsoft.com/download/3/3/f/33f1af6e-c61b-4f14-a0de-3e9096ed4b3a/DXSDK_Aug2007.exe -o _DX2007_.exe
           7z x _DX2007_.exe -o_DX2007_
           7z x _DX2007_/DXSDK_Aug2007.exe -o_DX2007_
           cp _DX2007_/Lib/x86/dinput.lib $HOME/cache-dx/Lib/x86
           rm -fR $HOME/cache-dx.git $HOME/cache-dx/Lib/x64 $HOME/cache-dx/*.txt $HOME/cache-dx/*.rtf _DX2007_ _DX2007_.exe
           ls -Ra $HOME/cache-dx
           du -hd0 $HOME/cache-dx
           echo ::set-env name=DXSDK_DIR::$HOME/cache-dx/
           git status
    shell: bash

### Major tasks
### always generates commit (if needed)

  # updates pre-release version of sfall (develop branch, ReleaseXP configuration)
  - name:  sfall-develop update
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           SFALL_COMMIT=$(curl -Ls https://ci.appveyor.com/api/projects/rotators/sfall/branch/develop 2>/dev/null | jq -r '.build.commitId')
           curl -L "https://ci.appveyor.com/api/projects/rotators/sfall/artifacts/ddraw.dll?job=Configuration:%20ReleaseXP&branch=develop&pr=false" -o $MOD_DIR/ddraw.develop.dll

           SFALL_VERSION=$(powershell -command "(Get-Item $MOD_DIR/ddraw.develop.dll).VersionInfo.ProductVersion")
           echo "sfall-develop (v${SFALL_VERSION}, ${SFALL_COMMIT})"

           git diff --quiet || (git add --update && echo "- sfall-develop update (v${SFALL_VERSION}, phobos2077/sfall@${SFALL_COMMIT})" >> $HOME/gha.commit)
    shell: bash

  # TODO compile sfall without AppVeyor
  - name:  (TODO) sfall-develop update
#   if:    env.GHA_REPO_ALIVE == 'true' && env.GHA_TASK_SFALL_BINARY == 'true'
    run:   |
           :
           echo "@echo off" > $HOME/sfall/sfall/PostBuild.cmd
           curl -sL https://github.com/microsoft/vswhere/releases/latest/download/vswhere.exe -o $HOME/vswhere.exe
           "$($HOME/vswhere.exe -latest -requires Microsoft.Component.MSBuild -find MSBuild/**/Bin/MSBuild.exe)" $HOME/sfall/sfall/ddraw.sln -p:Configuration=ReleaseXP -p:Platform=Win32
           # cp "$HOME/sfall/sfall/ReleaseXP/ddraw.dll" $MOD_DIR/ddraw.develop.dll
    shell: bash
    continue-on-error: true

  # updates sfall artifacts
  - name:  ModdersPack update
    if:    env.GHA_REPO_ALIVE == 'true' && env.GHA_TASK_SFALL_ARTIFACTS == 'true'
    run:   |
           :
           rm -fR Tools/ModdersPack
           cp -r $HOME/sfall/artifacts Tools/ModdersPack

           if [[ -n $(git status --short --untracked-files=all Tools/ModdersPack) ]]; then
              git add Tools/ModdersPack
              SFALL_COMMIT=$(git -C $HOME/sfall log --pretty=format:%H -1 artifacts)
              echo "- ModdersPack update (phobos2077/sfall@${SFALL_COMMIT})" >> $HOME/gha.commit
           fi
    shell: bash

  # updates scripts sources to Rotators standards
  - name:  ReDefine run
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           scripts=$(grep "^ScriptsDir" Tools/ReDefine/ReDefine.cfg | awk '{print $3}' | sed -re 's!^[\.\/]+!!')
           headers=$(grep "^HeadersDir" Tools/ReDefine/ReDefine.cfg | awk '{print $3}' | sed -re 's!^[\.\/]+!!')

           Tools/ReDefine/ReDefine.exe --config Tools/ReDefine/ReDefine.cfg --scripts $scripts --headers $headers >/dev/null

           grep "^Changed " ReDefine.log || true
           rm ReDefine*.log
           git diff --quiet || (git add --update && echo ::set-env name=GHA_REDEFINE::true)
    shell: bash

  # updates scripts bytecode
  # excludes 'ReDefine run' step results (if any) when scripts cannot be compiled
  - name:  Scripts recompilation
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           ok=1
           .github/workflows/scripts.compile.sh --bytecode --optimization=1 || ok=0
           if [ $ok -eq 1 ]; then
              if [ "$GHA_REDEFINE" == "true" ]; then
                 echo "- ReDefine run" >> $HOME/gha.commit
              fi

              git diff --quiet || (git add --update && echo "- Scripts recompilation" >> $HOME/gha.commit)
           else
              if [ "$GHA_REDEFINE" == "true" ]; then
                 echo "[WARNING] Excluded: ReDefine run"
                 git reset HEAD  $MOD_DIR/Mapper/source/scripts/
                 git checkout -- $MOD_DIR/Mapper/source/scripts/
              fi
              echo "[WARNING] Excluded: Scripts recompilation"
              git checkout -- $MOD_DIR/mods/fo1_base/scripts/
           fi
    shell: bash

### Validation
### checks if any of major tasks wants to generate commit
### prepares commit message

  - name:  Validation
    if:    env.GHA_REPO_ALIVE == 'true'
    run:   |
           :
           echo ::group::git status
           git status 2>&1
           echo ::endgroup::

           if [ -f "$HOME/gha.commit" ]; then
              sed -i '1s!^!Progress every day\n!' $HOME/gha.commit
              dos2unix $HOME/gha.commit
              echo ::set-env name=GHA_COMMIT::true
              cat $HOME/gha.commit
           fi
    shell: bash

### Minor tasks
### runs only if at least one of major tasks wants to generate commit

  # update ddraw.ini comment with ddraw.dll version
  # update ddraw.ini setting with mod version
  - name:  Configuration refresh
    if:    env.GHA_REPO_ALIVE == 'true' && env.GHA_COMMIT == 'true'
    run:   |
           :
           REPO_COMMITS=$(git rev-list HEAD --count)
           REPO_COMMITS=$((REPO_COMMITS+1))
           SFALL_VERSION=$(powershell -command "(Get-Item $MOD_DIR/ddraw.dll).VersionInfo.ProductVersion")

           dos2unix $MOD_DIR/ddraw.ini

           sed -ri "s!^;v[0-9\.]+.*!;v$SFALL_VERSION!" $MOD_DIR/ddraw.ini
           sed -ri "s!^[\t\ ]*VersionString[\t\ ]*=[\t\ ]*.+!VersionString=$MOD_VERSION_STRING $MOD_VERSION_MAJOR.$REPO_COMMITS!" $MOD_DIR/ddraw.ini

           grep "^;v" $MOD_DIR/ddraw.ini
           grep "^VersionString=" $MOD_DIR/ddraw.ini

           unix2dos $MOD_DIR/ddraw.ini
           git diff --quiet || (git add --update && echo "- Configuration refresh" >> $HOME/gha.commit)
    shell: bash

### Push
### generates and displays commit
### pushes generated commit to repository; available only for following events (any other triggers are for testing purposes):
### - schedule

  - name:  Push
    if:    env.GHA_REPO_ALIVE == 'true' && env.GHA_COMMIT == 'true'
    run:   |
           :
           echo ::group::git commit
           dos2unix $HOME/gha.commit
           git config --global user.name  "${{ secrets.ANTALASKAYA_NAME }}"
           git config --global user.email "${{ secrets.ANTALASKAYA_EMAIL }}"
           git commit --file="$HOME/gha.commit" 2>&1
           echo ::endgroup::

           echo ::group::git log
           git log -p -n 1 2>&1
           echo ::endgroup::

           if [ "${{ github.event_name }}" == "schedule" ]; then
              echo ::group::git push
              git push 2>&1
              echo ::endgroup::
           else
              echo "[WARNING] Repository not updated : event<${{ github.event_name }}> not allowed to modify repository"
           fi
    shell: bash
    continue-on-error: true
